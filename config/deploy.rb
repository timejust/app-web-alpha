require 'bundler/capistrano'
require 'whenever/capistrano'
require 'capistrano/ext/multistage'
require 'capistrano-notification'

set :stages,                  %w(development staging production)
set :default_stage,           "development"

# Common options
set :use_sudo,                true
set :application,             "app-web-alpha"
set :scm,                     "git"
set :repository,              "git@github.com:timejust/#{application}.git"
set :user,                    "timejust"
set :repository_cache,        "git_cache"

set :copy_exclude,            [".DS_Store", ".git"]

default_run_options[:pty]      = true
ssh_options[:forward_agent]    = true

set :whenever_command,        "bundle exec whenever"
set :whenever_environment,    defer { rails_env }

after "deploy:update_code",   "mongoid:symlink"
after "deploy:restart",       "resque:stop", "resque:start", "thin:restart"
after "deploy",               "deploy:cleanup"
after "deploy:setup",         "mongoid:copy"


namespace :logs do
  desc "Watch jobs log"
  task :default do
    run "tail -f #{current_path}/log/#{rails_env}.log"
  end
end

namespace :mongoid do
  desc "Copy mongoid config"
  task :copy do
    upload "config/mongoid/#{rails_env}.yml", "#{shared_path}/mongoid.yml", :via => :scp
  end
  task :symlink do
    run "ln -s #{shared_path}/mongoid.yml #{release_path}/config/mongoid.yml"
  end
end

namespace :resque do
  desc "start resque queues"
  task :start do
    run "cd #{current_path} && sudo bundle exec rake resque:pool:start RAILS_ENV=#{rails_env}"
  end
  desc "stop resque queues"
  task :stop do
    run "cd #{current_path} && sudo bundle exec rake resque:pool:stop RAILS_ENV=#{rails_env}"
  end
  desc "restart resque queues"
  task :restart do
    run "cd #{current_path} && sudo bundle exec rake resque:pool:restart RAILS_ENV=#{rails_env}ยง"
  end
end

namespace :gadget do
  desc 'deploy gadget'
  task :deploy do
    upload "app/views/gadget/show.xml.haml", "#{current_path}/app/views/gadget/show.xml.haml", :via => :scp
    js_files = YAML.load_file('config/configatron_data/gadget.yml')[:all][:gadget][:js]
    js_files.each_pair do |key, value|
      value.each {|f| upload f, File.join(current_path, f), :via => :scp }
    end
  end
end

namespace :thin do
  desc "Restart thin"
  task :restart do
    run "sudo /etc/init.d/app-web-alpha restart"
  end

  desc "Stop thin"
  task :stop do
    run "sudo /etc/init.d/app-web-alpha stop"
  end
end

namespace :sass do
  desc 'Updates the stylesheets generated by Sass'
  task :update, :roles => :app do
    run "cd #{current_path}; RAILS_ENV=#{rails_env} rake sass:update"
  end
end

